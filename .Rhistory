### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("harbor porpoise HHMM states")
hierStates$AddChild(name="nonforaging")
hierStates$nonforaging$AddChild(name="nf1", state=1)
hierStates$nonforaging$AddChild(name="nf2", state=2)
hierStates$nonforaging$AddChild(name="nf3", state=3)
hierStates$AddChild(name="foraging")
hierStates$foraging$AddChild(name="f1", state=4)
hierStates$foraging$AddChild(name="f2", state=5)
hierStates$foraging$AddChild(name="f3", state=6)
plot(hierStates)
install.packages("DiagrammeR")
plot(hierStates)
library(data.tree)
### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("harbor porpoise HHMM states")
hierStates$AddChild(name="nonforaging")
hierStates$nonforaging$AddChild(name="nf1", state=1)
hierStates$nonforaging$AddChild(name="nf2", state=2)
hierStates$nonforaging$AddChild(name="nf3", state=3)
hierStates$AddChild(name="foraging")
hierStates$foraging$AddChild(name="f1", state=4)
hierStates$foraging$AddChild(name="f2", state=5)
hierStates$foraging$AddChild(name="f3", state=6)
plot(hierStates)
install.packages("DiagrammeR")
plot(hierStates)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1)
library(dplyr)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1)
newData = prepData(BlacktipB,coordNames = NULL,covNames = c(,"Temp","Depth"))
library(momentuHMM)
newData = prepData(BlacktipB,coordNames = NULL,covNames = c(,"Temp","Depth"))
BlacktipB
newData = prepData(BlacktipB,coordNames = NULL)
fit1 = fitHMM(newData,nbStates = 2)
BlacktipB
newData = prepData(BlacktipB,coordNames = "Depth")
newData = prepData(BlacktipB,coordNames = NULL)
newData
fit1 = fitHMM(newData,nbStates = 2)
plot(newData)
newData = prepData(BlacktipB,coordNames = NULL)
newData
fit1 = fitHMM(newData,nbStates = 2,dist = NULL)
fit1 = fitHMM(newData,nbStates = 2,dist = list(NULL))
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL))
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL))
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),Par0 = NULL)
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),Par0 = list(NULL))
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),
Par0 = list(step=NULL,angle=NULL))
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),
Par0 = list(step=NULL,angle=NULL),fit = FALSE)
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),
Par0 = list(step=c(NULL),angle=NULL),fit = FALSE)
fit1 = fitHMM(newData,nbStates = 2,dist = list(step=NULL,angle=NULL),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
fit1 = fitHMM(newData,nbStates = 2,dist = list(step="gamma",angle="vm"),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
newData = prepData(BlacktipB,coordNames = c("ODBA","Depth"))
head(BlacktipB)
names(BlacktipB)
newData = prepData(BlacktipB,coordNames = c("ODBA","Depth"))
newData = prepData(BlacktipB,coordNames = c("ODBA","Temp"))
newData = prepData(BlacktipB,coordNames = c("ID","ODBA"))
newData = prepData(BlacktipB,coordNames = c("Time","ODBA"))
newData = prepData(BlacktipB,coordNames = c(0,"ODBA"))
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,lon=0)
BlacktipB
newData = prepData(BlacktipB,coordNames = c("lon","ODBA"))
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,lon=0) %>% group_by(Time) %>%
filter(row_number() == 1) %>% ungroup()
newData = prepData(BlacktipB,coordNames = c("lon","ODBA"))
BlacktipB
URL <- paste0("https://www.datarepository.movebank.org/bitstream/handle/",
"10255/move.373/Elliptical%20Time-Density%20Model%20%28Wall%",
"20et%20al.%202014%29%20African%20Elephant%20Dataset%20%",
"28Source-Save%20the%20Elephants%29.csv")
rawData <- read.csv(url(URL))
# select and rename relevant columns
rawData <- rawData[,c(11,3,4,5,6)]
colnames(rawData) <- c("ID","time","lon","lat","temp")
rawData
newData = prepData(BlacktipB,coordNames = c("ODBA","lon"))
rawData
head(rawData)
# convert times from factors to POSIX
rawData$time <- as.POSIXct(rawData$time,tz="GMT")
rawData
head(rawData)
newData = prepData(BlacktipB)
head(rawData)
head(BlacktipB)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,lon=0) %>% #group_by(Time) %>%
rename(lat = ODBA)
newData = prepData(BlacktipB)
newData = prepData(BlacktipB,coordNames = NULL)
newData
fit1 = fitHMM(newData,nbStates = 2,dist = list(step="gamma",angle="vm"),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
# create momentuHMMData object from crwData object
elephantData <- prepData(data=crwOut, covNames="temp")
# project to UTM coordinates using package rgdal
library(rgdal)
llcoord <- SpatialPoints(rawData[,3:4],
proj4string=CRS("+proj=longlat +datum=WGS84"))
# only keep first track
rawData <- subset(rawData,ID==unique(ID)[1])
rawData <- read.csv(url(URL))
# select and rename relevant columns
rawData <- rawData[,c(11,3,4,5,6)]
colnames(rawData) <- c("ID","time","lon","lat","temp")
# only keep first track
rawData <- subset(rawData,ID==unique(ID)[1])
head(rawData)
# convert times from factors to POSIX
rawData$time <- as.POSIXct(rawData$time,tz="GMT")
# project to UTM coordinates using package rgdal
library(rgdal)
llcoord <- SpatialPoints(rawData[,3:4],
proj4string=CRS("+proj=longlat +datum=WGS84"))
utmcoord <- spTransform(llcoord,CRS("+proj=utm +zone=30 ellps=WGS84"))
# add UTM locations to data frame
rawData$x <- attr(utmcoord,"coords")[,1]
rawData$y <- attr(utmcoord,"coords")[,2]
# fit crawl model
crwOut <- crawlWrap(obsData=rawData, timeStep="hour",
theta=c(6.855, -0.007), fixPar=c(NA,NA))
rawData
# create momentuHMMData object from crwData object
elephantData <- prepData(data=crwOut, covNames="temp")
elephantData
newData = prepData(BlacktipB)
head(BlacktipB)
head(elephantData)
head(rawData)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA)
newData = prepData(BlacktipB)
BlacktipB
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA) %>% relocate(ID,Time:Depth,x,y)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA) %>% relocate(ID,Time:Depth,x,y)
head(BlacktipB)
library(janitor)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA) %>% relocate(ID,Time:Depth,x,y) %>% clean_names()
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>% mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA) %>% relocate(ID,Time:Depth,x,y) %>% clean_names()
head(BlacktipB)
newData = prepData(BlacktipB)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = ODBA) %>% relocate(ID,Time:Depth,x,y)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = odba) %>% relocate(ID,Time:Depth,x,y)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
ID=1,x=0) %>% #group_by(Time) %>%
rename(y = odba) %>% relocate(ID,time:depth,x,y)
head(BlacktipB)
newData = prepData(BlacktipB)
newData = prepData(BlacktipB,coordNames = c("x","y"))
head(crwOut)
class(rawData)
class(crwOut)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
ID=1,angle=0) %>% #group_by(Time) %>%
rename(step = odba) %>% relocate(ID,time:depth,x,y)
newData = prepData(BlacktipB)
fit1 = fitHMM(newData,nbStates = 2,dist = list(step="gamma",angle="vm"),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
fit1 = fitHMM(BlacktipB,nbStates = 2,dist = list(step="gamma",angle="vm"),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
newData = prepData(BlacktipB)
newData = prepData(BlacktipB,coordNames = NULL)
newData
BlacktipB
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
ID=1,angle=0) %>% #group_by(Time) %>%
rename(step = odba) %>% relocate(ID,time:depth,x,y)
BlacktipB = BlacktipB %>%
clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
ID=1,angle=0) %>% #group_by(Time) %>%
rename(step = odba) %>% relocate(ID,time:depth,angle,step)
newData = prepData(BlacktipB,coordNames = NULL)
class(newData)
fit1 = fitHMM(BlacktipB,nbStates = 2,dist = list(step="gamma",angle="vm"),
Par0 = list(step=c(NULL),angle=c(NULL)),fit = FALSE)
fit1 = fitHMM(BlacktipB,nbStates=2)
fit1 = fitHMM(newData,nbStates=2)
fit1 = fitHMM(newData,nbStates=2,dist=c(step="gamma",angle="vm"))
fit1 = fitHMM(newData,nbStates=2,dist=list(step="gamma",angle="vm"))
plot(newData)
hist(newData$step)
hist(BlacktipB$step)
max(BlacktipB$step)
hist(BlacktipB$step,breaks = 40)
hist(BlacktipB$step[BlacktipB$step < 10],breaks = 40)
hist(BlacktipB$step[BlacktipB$step < 2],breaks = 40)
hist(BlacktipB$step[BlacktipB$step < .5],breaks = 40)
Par0 <- list(step=c(100,500,100,200),angle=c(0.3,0.7))
Par0 <- list(step=c(.1,.3,1,1),angle=c(0.3,0.7))
fit1 = fitHMM(newData,nbStates=2,dist=list(step="gamma",angle="vm"),Par0 = Par0)
BlacktipB
BlacktipB = BlacktipB %>%
#clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
#ID=1,angle=0
) %>% #group_by(Time) %>%
#rename(step = odba) %>% relocate(ID,time:depth,angle,step)
#filter(row_number() == 1) %>% ungroup()
newData = prepData(BlacktipB,coordNames = NULL)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
#clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
#ID=1,angle=0
) %>% #group_by(Time) %>%
#rename(step = odba) %>% relocate(ID,time:depth,angle,step)
#filter(row_number() == 1) %>% ungroup()
newData = prepData(BlacktipB,coordNames = NULL)
BlacktipB = BlacktipB %>%
#clean_names() %>%
mutate(time = as.POSIXct(time,format = "%m/%d/%Y %H:%M"),
#ID=1,angle=0
) #%>% group_by(Time) %>%
BlacktipB = BlacktipB %>%
#clean_names() %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M"),
#ID=1,angle=0
) #%>% group_by(Time) %>%
BlacktipB
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = c(.1,.3,1,1))
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
fit1 = fitHMM(BlacktipB,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
newData = prepData(BlacktipB,coordNames = NULL)
newData
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
fit1
plot(m1)
plot(fit1)
fit1
fit1
plotStates(fit1)
heatmap(fit1)
plotPR(fit1)
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
library(ggplot2)
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
head(BlacktipB)
max(BlacktipB$Time)
BlacktipB %>% filter(Time == "2013-07-10") %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time == as.Date("2013-07-10")) %>% ggplot(aes(Time,ODBA)) + geom_line()
head(BlacktipB)
BlacktipB %>% filter(Time == as.Date("2013-07-10",format = "%Y-%m-%d")) %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time == as.Date("2013-07-10",format = "%Y-%m-%d"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time == "2013-07-10")# %>% ggplot(aes(Time,ODBA)) + geom_line()
as.Date("2013-07-10")
class(as.Date("2013-07-10"))
BlacktipB$Time[1]
class(as.POSIXct("2013-07-10"))
as.POSIXct("2013-07-10")
BlacktipB %>% filter(Time == as.POSIXct("2013-07-10"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < "2013-07-10 14:46:00 EDT")# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < as.POSIXct("2013-07-10 14:46:00 EDT"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < as.POSIXct("2013-07-10 14:46:00"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < as.POSIXct("2013-07-10 14:46:00",format = "%m/%d/%Y %H:%M"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < as.POSIXct("2013-07-10 14:46:00",format = "%Y-%m-%d %H:%M"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% filter(Time < as.POSIXct("2013-07-10 14:46:00",format = "%Y-%m-%d %H:%M:%S"))# %>% ggplot(aes(Time,ODBA)) + geom_line()
library(lubridate)
BlacktipB %>% mutate(Time2 =  day(Time))# %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% mutate(day = day(Time)) %>% filter(day == 13) %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB = BlacktipB %>% mutate(day = day(Time)) %>% filter(day == 13)
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB = BlacktipB %>% filter(ODBA <= 2.0)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
#clean_names() %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) #%>% group_by(Time) %>%
BlacktipB = BlacktipB %>% mutate(day = day(Time),
hour = hour(Time)) %>%
filter(day == 13)
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB = BlacktipB %>% filter(ODBA <= 2.0)
BlacktipB %>% ggplot(aes(Time,ODBA)) + geom_line()
newData = prepData(BlacktipB,coordNames = NULL,covNames = "hour")
newData
plot(newData)
hist(newData$ODBA)
hist(newData$ODBA,breaks = 40)
hist(newData$ODBA,breaks = 80)
hist(newData$ODBA)
hist(newData$ODBA,breaks=80)
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
fit1
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = hour(Time))
BlacktipB %>% filter(day == 13) %>% ggplot(aes(Time,ODBA)) + geom_line()
BlacktipB = BlacktipB %>% filter(ODBA <= 2.0)
head(newData)
head(BlacktipB)
BlacktipB %>% filter(ODBA>2.0)
newData = prepData(BlacktipB,coordNames = NULL,covNames = "hour")
head(newData)
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
fit1
AIC(fit1)
BIC(fit1)
#Checking for pseudo-residuals
plot(fi1)
#Checking for pseudo-residuals
plot(fit1)
plot(fit1,breaks = 80)
fit1.plot = plot(fit1,breaks = 80)
fit1.plot
fit1.plot$ask
plot(fit1.plot)
lines(fit1.plot)
print(fit1.plot)
#Checking for pseudo-residuals
plotPR(fit1)
AIC(fit1)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = hms(Time))
head(BlacktipB)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = hm(Time))
head(BlacktipB)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = format(Time, format = "%H:M"))
head(BlacktipB)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = format(Time, format = "%H:%M"))
head(BlacktipB)
BlacktipB$hour
BlacktipB$hour[1]
BlacktipB$hour[1] + 1
class(BlacktipB$hour[1])
head(BlacktipB)
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour = as.POSIXct(format(Time, format = "%H:%M")))
head(BlacktipB)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour =  hm(format(Time, format = "%H:%M")))
head(BlacktipB)
BlacktipB = BlacktipB %>% filter(ODBA <= 2.0)
newData = prepData(BlacktipB,coordNames = NULL,covNames = "hour")
hist(newData$ODBA,breaks=80)
#MLE es bastante parecido; a lo mejor hay que tratar con distintos valores para Par0
fit1
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
#MLE es bastante parecido; a lo mejor hay que tratar con distintos valores para Par0
fit1
AIC(fit1)
formula = cosinor(hour, period = 86400)
library(rgdal)
formula = cosinor(hour, period = 86400)
library(rgdal)
library(momentuHMM)
formula = cosinor(hour, period = 86400)
?cosino
?cosinor
formula = ~ cosinor(hour, period = 86400)
Par0_fit2 <- getPar0(model=fit1, formula=formula)
BlacktipB$hour@year
BlacktipB$hour@month
BlacktipB$hour@hour
BlacktipB$hour@.Data
BlacktipB$hour@minute
BlacktipB$hour[1]
BlacktipB$hour[1]*60
hour(BlacktipB$hour[1])
hour(BlacktipB$hour[1])*60
hour(BlacktipB$hour[1])*60*60
hour(BlacktipB$hour[1])*60*60 + minute(BlacktipB$hour[1])
BlacktipB$hour[1]
minute(BlacktipB$hour[1])
(hour(BlacktipB$hour[1])*60 + minute(BlacktipB$hour[1]))*60
second(BlacktipB$Time[1])
seconds(BlacktipB$Time[1])
BlacktipB$Time[1]
seconds(format(BlacktipB$Time[1], format = "%H:%M"))
format(BlacktipB$Time[1], format = "%H:%M")
seconds(format(BlacktipB$Time[1], format = "%H:%M"))
hm(format(BlacktipB$Time[1], format = "%H:%M"))
seconds(hm(format(BlacktipB$Time[1], format = "%H:%M")))
seconds(hm(format(BlacktipB$Time[1], format = "%H:%M"))) + 1
BlacktipB <- read_delim("C:/Users/marco/Downloads/BlacktipB_original.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour =  seconds(hm(format(Time, format = "%H:%M"))))
BlacktipB = BlacktipB %>% filter(ODBA <= 2.0)
newData = prepData(BlacktipB,coordNames = NULL,covNames = "hour")
formula = ~ cosinor(hour, period = 86400)
Par0_fit2 <- getPar0(model=fit1, formula=formula)
head()
head(BlacktipB)
BlacktipB = BlacktipB %>%
mutate(Time = as.POSIXct(Time,format = "%m/%d/%Y %H:%M")) %>%
mutate(day = day(Time),hour =  as.integer(seconds(hm(format(Time, format = "%H:%M")))))
head(BlacktipB)
formula = ~ cosinor(hour, period = 86400)
newData = prepData(BlacktipB,coordNames = NULL,covNames = "hour")
Par0_fit2 <- getPar0(model=fit1, formula=formula)
fit1 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)))
#MLE es bastante parecido; a lo mejor hay que tratar con distintos valores para Par0
fit1
Par0_fit2 <- getPar0(model=fit1, formula=formula)
fit2 = fitHMM(newData,nbStates=2,dist=list(ODBA="gamma"),Par0 = list(ODBA=c(.1,.3,1,1)),
formula=formula)
fit2
plot(fit2)
fit1.plot
class(fit1.plot)
class(fit1.plot[[1]])
fit1.plot[[1]]
fit1.plot[[2]]
setwd("~/Vianey/Fall_2022/Day3")
jpeg("fit1.jpg", width = 350, height = 350)
plot(fit1,breaks = 80)
dev.off()
jpeg("fit1.jpg", width = 700, height = 700)
plot(fit1,breaks = 80)
dev.off()
