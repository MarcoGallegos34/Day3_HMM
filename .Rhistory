select(HST,days,level,change_depth))
tigerSharkData <- rbind(coarseInd,tmp)
}
tigerSharkData
# convert date_time to POSIX
tigerSharkData <- NULL
for(i in days_range){
coarseInd <- data.frame(tigerShark %>% filter(days == i) %>%
filter(row_number() == 1) %>% select(HST),
days = i,
level=c("1","2i"),
change_depth=NA)
tmp <- rbind(coarseInd,tigerShark %>% filter(days == i) %>% mutate(level = "2") %>%
select(HST,days,level,change_depth))
tigerSharkData <- rbind(tigerSharkData,tmp)
}
tigerSharkData
tigerSharkData
head(tigerSharkData)
tigerSharkData = prepData(tigerSharkData,coordNames = NULL, hierlevels = c("1","2i","2"))
class(tigerSharkData)
tigerSharkData <- NULL
for(i in days_range){
coarseInd <- data.frame(tigerShark %>% filter(days == i) %>%
filter(row_number() == 1) %>% select(HST),
days = i,
level=c("1","2i"),
change_depth=NA)
tmp <- rbind(coarseInd,tigerShark %>% filter(days == i) %>% mutate(level = "2") %>%
select(HST,days,level,change_depth))
tigerSharkData <- rbind(tigerSharkData,tmp)
}
head(tigerSharkData)
tigerSharkData <- NULL
for(i in days_range){
coarseInd <- data.frame(tigerShark %>% filter(days == i) %>%
filter(row_number() == 1) %>% select(HST),
days = i,
level=c("1","2i"),
change_depth=NA)
tmp <- rbind(coarseInd,tigerShark %>% filter(days == i) %>% mutate(level = "2") %>%
select(HST,days,level,change_depth))
tigerSharkData <- rbind(tigerSharkData,tmp)
}
head(tigerSharkData)
tigerSharkData = prepData(tigerSharkData,
coordNames = NULL, hierLevels = c("1","2i","2"))
names(tigerSharkData)
tigerSharkData
# summarize prepared data
summary(tigerSharkData, dataNames = names(tigerSharkData)[-1])
#Alternative way for specifying
hierStates <- data.tree::as.Node(list(name="tiger shark HHMM states",
noTravelling=list(nt1=list(state=1),
nt2=list(state=2),
nt3=list(state=3)),
travelling=list(t1=list(state=4),
t2=list(state=5),
t3=list(state=6))))
plot(hierStates)
### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("tiger shark HHMM states")
hierStates$AddChild(name="nontravelling")
hierStates$nonforaging$AddChild(name="nt1", state=1)
hierStates$nonforaging$AddChild(name="nt2", state=2)
hierStates$nonforaging$AddChild(name="nt3", state=3)
hierStates$AddChild(name="travelling")
hierStates$foraging$AddChild(name="t1", state=4)
hierStates$foraging$AddChild(name="t2", state=5)
### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("tiger shark HHMM states")
hierStates$AddChild(name="nontravelling")
hierStates$nonforaging$AddChild(name="nt1", state=1)
### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("tiger shark HHMM states")
hierStates$AddChild(name="nontravelling")
hierStates$nontravelling$AddChild(name="nt1", state=1)
hierStates$nontravelling$AddChild(name="nt2", state=2)
hierStates$nontravelling$AddChild(name="nt3", state=3)
hierStates$AddChild(name="travelling")
hierStates$travelling$AddChild(name="t1", state=4)
hierStates$travelling$AddChild(name="t2", state=5)
hierStates$travelling$AddChild(name="t3", state=6)
plot(hierStates)
# data stream distributions
# level 1 = coarse scale (no data streams)
# level 2 = fine scale (dive_duration, maximum_depth, dive_wiggliness)
hierDist <- data.tree::Node$new("tiger shark HHMM dist")
hierDist$AddChild(name="level1")
hierDist$AddChild(name="level2")
hierDist$level2$AddChild(name="change_depth", dist="gamma")
plot(hierDist)
# defining starting values
cd.mu0 = rep(c(5,50,100),hierStates$count)
cd.sigma0 = rep(c(5,15,40),hierStates$count)
# defining starting values
cd.mu0 = rep(c(5,50,100),hierStates$count)
cd.sigma0 = rep(c(5,15,40),hierStates$count)
nbStates <- length(hierStates$Get("state",filterFun=data.tree::isLeaf))
nbStates
# constrain fine-scale data stream distributions to be same
dw_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3)),
kronecker(c(0,0,0,0,1,1),diag(3))),
nrow=nbStates*3,
ncol=9,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates),
paste0("zeromass_",1:nbStates)),
paste0(rep(c("mean","sd","zeromass"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
dw_DM
dw_DM[1:(2*nbStates),1:6]
load(url(paste0("https://static-content.springer.com/esm/",
"art%3A10.1007%2Fs13253-017-0282-9/MediaObjects/",
"13253_2017_282_MOESM2_ESM.rdata")))
# convert date_time to POSIX
data <- lapply(data,function(x)
{x$date_time <- as.POSIXct(x$date_time,tz="UTC"); x})
porpoiseData <- NULL
for(i in 1:length(data)){
coarseInd <- data.frame(date_time=as.POSIXct(format(data[[i]]$date_time[1],
format="%Y-%m-%d %H:%M"),
tz="UTC"),
level=c("1","2i"),
dive_duration=NA,
maximum_depth=NA,
dive_wiggliness=NA)
tmp <- rbind(coarseInd,data.frame(data[[i]],level="2"))
porpoiseData <- rbind(porpoiseData,tmp)
}
porpoiseData$dive_wiggliness
hist(porpoiseData$dive_wiggliness)
hist(porpoiseData$dive_wiggliness,breaks=80)
hist(tigerSharkData$change_depth)
hist(abs(tigerSharkData$change_depth))
hist(abs(tigerSharkData$change_depth),breaks=80)
hist(porpoiseData$dive_wiggliness,breaks=80)
hist(abs(tigerSharkData$change_depth),breaks=80)
hist(porpoiseData$maximum_depth,breaks=80)
dw_DM[1:(2*nbStates),1:6]
# fit hierarchical HMM
hhmm <- fitHMM(data=porpoiseData,hierStates=hierStates,hierDist=hierDist,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
Par0=Par,hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
Par0=Par,hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par#,hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,#hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
#Par0=Par,#hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
table(porpoiseData$maximum_depth)
min(porpoiseData$maximum_depth)
min(porpoiseData$maximum_depth[!is.na(porpoiseData$maximum_depth)])
min(porpoiseData$dive_wiggliness[!is.na(porpoiseData$dive_wiggliness)])
table(porpoiseData$dive_wiggliness)
min(porpoiseData$dive_duration[!is.na(porpoiseData$dive_duration)])
min(porpoiseData$maximum_depth[!is.na(porpoiseData$maximum_depth)])
min(tigerShark$change_depth[!is.na(tigerShark$change_depth)])
min(tigerShark$change_depth[!is.na(tigerShark$change_depth)])
min(abs(tigerShark$change_depth)[!is.na(tigerShark$change_depth)])
table(tigerShark$change_depth)
length(tigerShark$change_depth)
length(porpoiseData$maximum_depth)
table(porpoiseData$dive_wiggliness)
518/length(porpoiseData$dive_wiggliness)
length(tigerShark$change_depth)
table(abs(tigerShark$change_depth))
242/length(tigerShark$change_depth)
518/length(porpoiseData$dive_wiggliness)
dw_DM[1:(2*nbStates),1:6]
dw_DM
matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3)),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates),
paste0("zeromass_",1:nbStates)))))
matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates))))
dw_D
dw_DM
matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
matrix(cbind(kronecker(c(1,1,0,0),diag(3)),
kronecker(c(0,0,1,1),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
matrix(cbind(kronecker(c(1,1,0,0),diag(3)),
kronecker(c(0,0,1,1),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = matrix(cbind(kronecker(c(1,1,0,0),diag(3)),
kronecker(c(0,0,1,1),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
cd_DM = matrix(cbind(kronecker(c(1,1,0,0),diag(3)),
kronecker(c(0,0,1,1),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = list(change_depth = cd_DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(porpoiseData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
Par0 = list(change_depth = c(cd.mu0,cd.sigma0))
nbStates
# get initial parameter values for data stream probability distributions
Par <- getParDM(porpoiseData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
Par <- getParDM(porpoiseData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
# check hierarchical model specification and parameters
checkPar0(porpoiseData,hierStates=hierStates,hierDist=hierDist,Par0=Par,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
DM=DM,hierBeta=hierBeta,hierDelta=hierDelta)
# define hierarchical t.p.m. formula(s)
hierFormula <- data.tree::Node$new("tiger shark HHMM formula")
hierFormula$AddChild(name="level1", formula=~1)
hierFormula$AddChild(name="level2", formula=~1)
# define hierarchical initial distribution formula(s)
hierFormulaDelta <- data.tree::Node$new("tiger shark HHMM formulaDelta")
hierFormulaDelta$AddChild(name="level1", formulaDelta=~1)
hierFormulaDelta$AddChild(name="level2", formulaDelta=~1)
# check hierarchical model specification and parameters
checkPar0(porpoiseData,hierStates=hierStates,hierDist=hierDist,Par0=Par,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
DM=DM,hierBeta=hierBeta,hierDelta=hierDelta)
# check hierarchical model specification and parameters
checkPar0(porpoiseData,hierStates=hierStates,hierDist=hierDist,Par0=Par,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
DM=DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
tigerSharkData
plot(hierStates)
# data stream distributions
# level 1 = coarse scale (no data streams)
# level 2 = fine scale (dive_duration, maximum_depth, dive_wiggliness)
hierDist <- data.tree::Node$new("tiger shark HHMM dist")
hierDist$AddChild(name="level1")
hierDist$AddChild(name="level2")
hierDist$level2$AddChild(name="change_depth", dist="gamma")
plot(hierDist)
# define hierarchical t.p.m. formula(s)
hierFormula <- data.tree::Node$new("tiger shark HHMM formula")
hierFormula$AddChild(name="level1", formula=~1)
hierFormula$AddChild(name="level2", formula=~1)
# define hierarchical initial distribution formula(s)
hierFormulaDelta <- data.tree::Node$new("tiger shark HHMM formulaDelta")
hierFormulaDelta$AddChild(name="level1", formulaDelta=~1)
hierFormulaDelta$AddChild(name="level2", formulaDelta=~1)
# defining starting values
cd.mu0 = rep(c(5,50,100),hierStates$count)
cd.sigma0 = rep(c(5,15,40),hierStates$count)
hierStates$count
Par0 = list(change_depth = c(cd.mu0,cd.sigma0))
nbStates <- length(hierStates$Get("state",filterFun=data.tree::isLeaf))
nbStates
# constrain fine-scale data stream distributions to be same
cd_DM = matrix(cbind(kronecker(c(1,1,0,0),diag(3)),
kronecker(c(0,0,1,1),diag(3))),
nrow=nbStates*2,
ncol=6,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates)),
paste0(rep(c("mean","sd"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = list(change_depth = cd_DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
dw_DM
dim(dw_DM)
dw_DM[1:(2*nbStates),1:6]
dim(dw_DM[1:(2*nbStates),1:6])
dim(cd_DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
dim(DM)
dim(DM$change_depth)
# constrain fine-scale data stream distributions to be same
cd_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3)),
kronecker(c(0,0,0,0,1,1),diag(3))),
nrow=nbStates*3,
ncol=9,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates),
paste0("zeromass_",1:nbStates)),
paste0(rep(c("mean","sd","zeromass"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = list(change_depth = cd_DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
cd.mu0
cd.sigma0
hierStates$count
cd.pi0 = rep(c(0.2,0.01,0.01),hierStates$count)
Par0 = list(change_depth = c(cd.mu0,cd.sigma0,cd.pi0))
nbStates <- length(hierStates$Get("state",filterFun=data.tree::isLeaf))
# constrain fine-scale data stream distributions to be same
cd_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3)),
kronecker(c(0,0,0,0,1,1),diag(3))),
nrow=nbStates*3,
ncol=9,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates),
paste0("zeromass_",1:nbStates)),
paste0(rep(c("mean","sd","zeromass"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = list(change_depth = cd_DM)
DM
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
# check hierarchical model specification and parameters
checkPar0(tigerSharkData,hierStates=hierStates,hierDist=hierDist,Par0=Par,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
DM=DM)
tigerShark <- read_csv("tigershark_depthchange10min.csv")
tigerShark = tigerShark %>% mutate(change_depth = abs(Depth - lag(Depth,default = 0)))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,#hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
tigerSharkData = prepData(tigerSharkData,
coordNames = NULL, hierLevels = c("1","2i","2"))
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,#hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
tigerShark <- read_csv("tigershark_depthchange10min.csv")
tigerShark = tigerShark %>% mutate(abs_change_depth = abs(Depth - lag(Depth,default = 0)))
tigerShark
tigerShark %>% select(abs_change_depth)
table(tigerShark %>% select(abs_change_depth))
tigerShark = tigerShark %>% select(HST,days,abs_change_depth)
days_range = unique(tigerShark$days)
tigerSharkData <- NULL
for(i in days_range){
coarseInd <- data.frame(tigerShark %>% filter(days == i) %>%
filter(row_number() == 1) %>% select(HST),
days = i,
level=c("1","2i"),
abs_change_depth=NA)
tmp <- rbind(coarseInd,tigerShark %>% filter(days == i) %>% mutate(level = "2") %>%
select(HST,days,level,abs_change_depth))
tigerSharkData <- rbind(tigerSharkData,tmp)
}
head(tigerSharkData)
tigerSharkData = prepData(tigerSharkData,
coordNames = NULL, hierLevels = c("1","2i","2"))
tigerSharkData
# summarize prepared data
summary(tigerSharkData, dataNames = names(tigerSharkData)[-1])
tigerSharkData
#library(DiagrammeR)
### define hierarchical HMM
### states 1-3 = coarse state 1 (nonforaging)
### states 4-6 = coarse state 2 (foraging)
hierStates <- data.tree::Node$new("tiger shark HHMM states")
hierStates$AddChild(name="nontravelling")
hierStates$nontravelling$AddChild(name="nt1", state=1)
hierStates$nontravelling$AddChild(name="nt2", state=2)
hierStates$nontravelling$AddChild(name="nt3", state=3)
hierStates$AddChild(name="travelling")
hierStates$travelling$AddChild(name="t1", state=4)
hierStates$travelling$AddChild(name="t2", state=5)
hierStates$travelling$AddChild(name="t3", state=6)
plot(hierStates)
#Alternative way for specifying
hierStates <- data.tree::as.Node(list(name="tiger shark HHMM states",
nontravelling=list(nt1=list(state=1),
nt2=list(state=2),
nt3=list(state=3)),
travelling=list(t1=list(state=4),
t2=list(state=5),
t3=list(state=6))))
plot(hierStates)
# data stream distributions
# level 1 = coarse scale (no data streams)
# level 2 = fine scale (dive_duration, maximum_depth, dive_wiggliness)
hierDist <- data.tree::Node$new("tiger shark HHMM dist")
hierDist$AddChild(name="level1")
hierDist$AddChild(name="level2")
hierDist$level2$AddChild(name="abs_change_depth", dist="gamma")
plot(hierDist)
# define hierarchical t.p.m. formula(s)
hierFormula <- data.tree::Node$new("tiger shark HHMM formula")
hierFormula$AddChild(name="level1", formula=~1)
hierFormula$AddChild(name="level2", formula=~1)
# define hierarchical initial distribution formula(s)
hierFormulaDelta <- data.tree::Node$new("tiger shark HHMM formulaDelta")
hierFormulaDelta$AddChild(name="level1", formulaDelta=~1)
hierFormulaDelta$AddChild(name="level2", formulaDelta=~1)
# defining starting values
cd.mu0 = rep(c(5,50,100),hierStates$count)
cd.sigma0 = rep(c(5,15,40),hierStates$count)
cd.pi0 = rep(c(0.2,0.01,0.01),hierStates$count)
Par0 = list(abs_change_depth = c(cd.mu0,cd.sigma0,cd.pi0))
nbStates <- length(hierStates$Get("state",filterFun=data.tree::isLeaf))
# constrain fine-scale data stream distributions to be same
cd_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(3)),
kronecker(c(0,0,1,1,0,0),diag(3)),
kronecker(c(0,0,0,0,1,1),diag(3))),
nrow=nbStates*3,
ncol=9,
dimnames=list(c(paste0("mean_",1:nbStates),
paste0("sd_",1:nbStates),
paste0("zeromass_",1:nbStates)),
paste0(rep(c("mean","sd","zeromass"),each=3),
c("_14:(Intercept)",
"_25:(Intercept)",
"_36:(Intercept)"))))
DM = list(abs_change_depth = cd_DM)
# get initial parameter values for data stream probability distributions
Par <- getParDM(tigerSharkData,hierStates=hierStates,hierDist=hierDist,
Par=Par0,DM=DM)
# check hierarchical model specification and parameters
checkPar0(tigerSharkData,hierStates=hierStates,hierDist=hierDist,Par0=Par,
hierFormula=hierFormula,hierFormulaDelta=hierFormulaDelta,
DM=DM)
# fit hierarchical HMM
hhmm <- fitHMM(data=tigerSharkData,hierStates=hierStates,hierDist=hierDist,
#hierFormula=hierFormula,#hierFormulaDelta=hierFormulaDelta,
Par0=Par,#hierBeta=hierBeta,hierDelta=hierDelta,
DM=DM,nlmPar=list(hessian=FALSE))
hhmm
saveRDS(hmm,"hmm.rds")
saveRDS(hhmm,"hmm.rds")
